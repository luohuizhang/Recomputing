--------SZ (version 1.4.9): Error-bounded Lossy Compressor for HPC Data--------
 (C) 2016 by Mathematics and Computer Science (MCS), Argonne National Laboratory.
       See COPYRIGHT in top-level directory.

===Example files===
-------------------
testdouble_compress.c  testdouble_decompress.c  testfloat_compress.c  testfloat_decompress.c
testdouble_compress_f.f90  testdouble_decompress_f.f90

You can use "make clean;make" to recompile all the example codes, or compile them by the customized Makefile.bk as follows:
make -f Makefile.bk

We provide an example below (more can be found in doc/userguide.pdf) 

char *SZ_compress(int dataType, void *data, int *outSize, int r5, int r4, int r3, int r2, int r1);

dataType: either SZ_DOUBLE or SZ_FLOAT
void *data: either double* data or float* data
int *outSize: size of output compressed data (in byte)
int r5: size of dimension 5 (the slowest-changing dimension)
int r4: size of dimension 4 
int r3: size of dimension 3 
int r2: size of dimension 2 
int r1: size of dimension 1 (the fastest-changing dimension)

Return: the compressed bytes

Note: The order of arguments of the executable example (e.g., testfloat_compress and testfloat_decompress) is following Fortran style (the fastest-changing dimension should appear first). For example, "./testfloat_compress sz.config data.dat r1 r2 r3".

Warm reminder: Please remember to release the memory occupied by the variable after calling the compress/decompress function if it's not used any longer in case of memory leakcage.

Note: Compiling testfloat_CompDecomp.c requires to install z-checker library first (https://github.com/CODARcode/Z-checker)
